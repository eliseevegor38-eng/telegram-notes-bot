import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from config import BOT_TOKEN
from database import Database

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_keyboard():
    keyboard = [
        ["üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É", "üìã –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏"],
        ["üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.add_user(user.id, user.username, user.first_name)

    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç {user.mention_html()}! üëã\n"
        f"–Ø –±–æ—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n\n"
        f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–º–µ—Ç–∫–∞–º–∏!",
        reply_markup=get_main_keyboard()
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É"
async def create_note_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏"""
    await update.message.reply_text(
        "–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –∏ —è –µ—ë —Å–æ—Ö—Ä–∞–Ω—é:",
        reply_markup=ReplyKeyboardRemove()
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É
    context.user_data['awaiting_note'] = True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏
async def save_note(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–º–µ—Ç–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if context.user_data.get('awaiting_note'):
        user_id = update.effective_user.id
        note_text = update.message.text
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        note_id = db.add_note(user_id, note_text)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data['awaiting_note'] = False
        
        await update.message.reply_text(
            f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n{note_text}",
            reply_markup=get_main_keyboard()
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–ª —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∞–º–∏ üëá",
            reply_markup=get_main_keyboard()
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏"
async def show_notes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    notes = db.get_notes(user_id)
    
    if not notes:
        await update.message.reply_text(
            "üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.\n–ù–∞–∂–º–∏ '–°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é!",
            reply_markup=get_main_keyboard()
        )
        return
    
    notes_list = "\n".join([f"‚Ä¢ {content}" for note_id, content, created_at in notes])
    await update.message.reply_text(
        f"üìñ –¢–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏ ({len(notes)} —à—Ç.):\n\n{notes_list}",
        reply_markup=get_main_keyboard()
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ"
async def clear_notes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    deleted_count = db.clear_notes(user_id)
    if deleted_count > 0:
        await update.message.reply_text(
            f"üóëÔ∏è –í—Å–µ –∑–∞–º–µ—Ç–∫–∏ ({deleted_count} —à—Ç.) —É–¥–∞–ª–µ–Ω—ã!",
            reply_markup=get_main_keyboard()
        )
    else:
        await update.message.reply_text(
            "‚ÑπÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=get_main_keyboard()
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    await update.message.reply_text(
        "‚ÑπÔ∏è **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:**\n\n"
        "‚Ä¢ **–°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É** - –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É\n"
        "‚Ä¢ **–ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏** - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏\n"
        "‚Ä¢ **–£–¥–∞–ª–∏—Ç—å –≤—Å–µ** - –æ—á–∏—â–∞–µ—Ç –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ - –≤—Å—ë –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω–æ! üòä",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    text = update.message.text
    
    if text == "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É":
        await create_note_start(update, context)
    elif text == "üìã –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏":
        await show_notes(update, context)
    elif text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ":
        await clear_notes(update, context)
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await help_command(update, context)
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –∑–∞–º–µ—Ç–∫—É
        await save_note(update, context)

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–Ω–æ–ø–æ–∫)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()